import { BaseOutputParser } from '@langchain/core/output_parsers';
import { ChatPromptTemplate } from '@langchain/core/prompts';
import { RunnableLambda, RunnableSequence } from '@langchain/core/runnables';
import { detectIntent } from '../prompts/detectIntent.prompt';
import { llm } from '../llm/llama3';
import { queryVectorStore } from '../vector/vectorStore';
import { extractOrderFromChatHistoryTool } from '../tools/extractOrderFromChatHistory.tool';
import { answerCustomerQuestionTool } from '../tools/answerQuestions.tool';

// ==== Utils ====
const getLastUserMessage = (chatHistory: string) => {
  const lines = chatHistory.split('\n');
  const userMessages = lines.filter(line => line.trim().toLowerCase().startsWith('user:'));
  return (userMessages.length > 0 && userMessages[userMessages.length - 1])
    ? userMessages[userMessages.length - 1]?.replace(/^user:\s*/i, '').trim()
    : '';
};

const handleErrorTool = {
  invoke: async (data: any) => {
    console.error('Erro capturado no fluxo:', data);
    return { error: 'Ocorreu um problema ao processar sua solicita√ß√£o.' };
  }
};

// ==== Intent Parser ====
const prompt = ChatPromptTemplate.fromTemplate(detectIntent);

class IntentEnumParser extends BaseOutputParser<string> {
  static override lc_name() {
    return "IntentEnumParser";
  }
  lc_namespace = ["chatbot", "parsers"];
  private readonly enumValues = [
    "OR√áAMENTO",
    "D√öVIDAS",
    "RECLAMA√á√ÉO",
    "FALAR COM HUMANO",
    "INDEFINIDO",
  ];
  async parse(text: string): Promise<string> {
    const cleaned = text.trim().toLowerCase();
    const matched = this.enumValues.find(value => cleaned.includes(value.toLowerCase()));
    return matched ?? 'INDEFINIDO';
  }
  getFormatInstructions(): string {
    return `Deve retornar exatamente uma das inten√ß√µes v√°lidas: ${this.enumValues.join(', ')}`;
  }
}

const detectIntentChain = prompt.pipe(llm).pipe(new IntentEnumParser());

// ==== Roteamento ====
const routingLambda = new RunnableLambda({
  func: async (input: {
    chatHistory: string;
    lastUserMessage: string;
    intent: string;
  }) => {
    const { chatHistory, lastUserMessage, intent } = input;

    switch (intent.toLowerCase()) {
      case 'or√ßamento': {
        const context = await queryVectorStore(lastUserMessage || chatHistory, 3);
        return {
          ...input,
          retrievedContext: context.map(c => c.content).join('\n'),
          route: 'or√ßamento',
          action: extractOrderFromChatHistoryTool
        };
      }

      case 'd√∫vidas': {
        if (!lastUserMessage) {
          return {
            ...input,
            retrievedContext: '',
            route: 'error',
            action: handleErrorTool,
            error: '√öltima mensagem n√£o encontrada. Query ao vector store n√£o pode ser vazia.'
          };
        }
        const context = await queryVectorStore(lastUserMessage, 3);
        return {
          ...input,
          retrievedContext: context.map(c => c.content).join('\n'),
          route: 'd√∫vidas',
          action: answerCustomerQuestionTool
        };
      }

      case 'reclama√ß√£o': {
        return {
          ...input,
          route: 'reclama√ß√£o',
          action: handleErrorTool, // placeholder at√© implementar
          error: 'Fluxo de reclama√ß√µes n√£o implementado ainda.'
        };
      }

      case 'falar com humano': {
        return {
          ...input,
          route: 'falar com humano',
          finalResponse: 'Est√° bem! Estou te encaminhando para um atendente humano.'
        };
      }

      default: {
        return {
          ...input,
          route: 'indefinido',
          finalResponse: 'Ol√°, em que posso te ajudar hoje?'
        };
      }
    }
  }
});



// ==== Execu√ß√£o final ====
const executeRouteLambda = new RunnableLambda({
  func: async (input: {
    chatHistory: string;
    lastUserMessage: string;
    retrievedContext?: string;
    route: string;
    finalResponse?: string;
    action?: any;
    error?: string;
  }) => {
    try {
      if (input.finalResponse) {
        return { result: input.finalResponse };
      }

      if (input.action) {
        const payload: any = {
          chat_history: input.chatHistory.split('\n'),
          context: input.retrievedContext || ''
        };

        if (input.route === 'd√∫vidas') {
          payload.question = input.lastUserMessage;
        }

        const result = await input.action.invoke(payload);
        return { result };
      }

      return { message: `Nenhuma a√ß√£o executada para rota ${input.route}` };
    } catch (err) {
      console.error(`Erro na rota ${input.route}:`, err);
      return { error: 'Falha ao executar a√ß√£o da rota.' };
    }
  }
});

function formatOrderForCustomer(jsonString: string): string {
  let items: any[];
  try {
    items = JSON.parse(jsonString);
  } catch (e) {
    return "‚ö†Ô∏è N√£o foi poss√≠vel entender o pedido.";
  }

  if (!Array.isArray(items) || items.length === 0) {
    return "üì≠ Nenhum item encontrado no pedido.";
  }

  const formatted = items.map((item, index) => {
    const nome = item.item ?? "[N√£o Informado]";
    const quantidade = item.quantidade ?? "[N√£o Informado]";
    const malha = item.malha ?? "[N√£o Informado]";
    const arte = item.arte ?? "[N√£o Informado]";
    const personalizacao = Array.isArray(item.personalizacao) && item.personalizacao.length > 0
      ? item.personalizacao.join(", ")
      : "[N√£o Informado]";

    return `üõçÔ∏è *Item ${index + 1}*
   - Produto: ${nome}
   - Quantidade: ${quantidade}
   - Malha: ${malha}
   - Arte: ${arte}
   - Personaliza√ß√£o: ${personalizacao}`;
  });

  return `üì¶ Detalhes do seu pedido:\n\n${formatted.join("\n\n")} \n\n‚úÖ Se algo estiver incorreto, por favor me avise.`;
}
const formatUserResponseLambda = new RunnableLambda({
  func: async (input: {
    result?: string | object;
    route?: string;
    error?: string;
  }) => {
    // Caso tenha erro, devolve algo j√° amig√°vel
    if (input.error) {
      return {
        finalMessage: `Ops! Tivemos um problema: ${input.error}`
      };
    }

    // Se for string, usa direto, se for objeto, transforma em texto
    let rawMessage = typeof input.result === 'string'
      ? input.result
      : JSON.stringify(input.result, null, 2);

    // Regras de formata√ß√£o por rota
    switch (input.route) {
      case 'or√ßamento':
        const friendlyData = formatOrderForCustomer(rawMessage)
        rawMessage = `Segue o que encontrei sobre seu or√ßamento. Verifique se as informa√ß√µes est√£o corretas, diga o que quer alterar ou confirme para que eu :\n${friendlyData}`;
        console.log("RAW MESSAGE", rawMessage)
        break;
      case 'd√∫vidas':
        rawMessage = `Aqui est√° a resposta para sua d√∫vida:\n${rawMessage}`;
        break;
      case 'reclama√ß√£o':
        rawMessage = `Recebemos sua reclama√ß√£o e vamos encaminhar: ${rawMessage}`;
        break;
      case 'falar com humano':
        rawMessage = rawMessage; // j√° deve estar pronto
        break;
      default:
        rawMessage = rawMessage || 'Posso te ajudar com mais alguma coisa?';
        break;
    }

    // Retorna formato final unificado
    return {
      route: input.route,
      message: rawMessage
    };
  }
});

// ==== Runnable Sequence ====
export const composedChain = RunnableSequence.from([
  // Detecta intent e √∫ltima mensagem logo no in√≠cio
  new RunnableLambda({
    func: async (input: { chatHistory: string }) => {
      const intent = await detectIntentChain.invoke({ chatHistory: input.chatHistory });
      const lastUserMessage = getLastUserMessage(input.chatHistory);
      return { chatHistory: input.chatHistory, lastUserMessage, intent };
    }
  }),
  routingLambda,
  executeRouteLambda,
  formatUserResponseLambda
]);
